!!#:section(title="Numeric basics",section="basics");
!!#://----------------------------------------------------------
!!#:subsection(title="Counting in bases",section="counting");
!!#:preformatted=0; newlinebreak=0;
!!#://This is a comment. Any line starting with !!#: a sequence unlikely to
!!#://occur in actual text, is interpreted as code.
Decimal is commonly used throughout the world, but in computer software and
hardware there are other numeric bases in use.

A numeric base determines how many digits there are before going back to the
first and using two digits. Decimal is base 10, and uses digits 0 through 9.

Another related term for this is "numerical system" as far as Wikipedia is
concerned.

Computer hardware and software also use binary (base 2), octal (base 8), and
hexadecimal (base 16). Each base number is a power of 2 because computers
think at a basic level in binary digits. Each base is a grouping of binary
digits to make writing easier. Octal can represent a group of 3 bits, and
hexadecimal a group of 4 bits.

!!#:preformatted=1; newlinebreak=1;
  Binary digits:      0 1
  Octal digits:       0 1 2 3 4 5 6 7
  Decimal digits:     0 1 2 3 4 5 6 7 8 9
  Hexadecimal digits: 0 1 2 3 4 5 6 7 8 9 A B C D E F
!!#:preformatted=0; newlinebreak=0;

To avoid confusion in computer software, decimal is written as normal,
hexadecimal starts with "0x", and octal with "0". Binary may be written
without any prefix or suffix but in some cases is written with a "b" at the
end, or a "0b" at the beginning to signal that the digits are binary.

The trailing "b" notation is used by some assembler programs and the leading
"0b" syntax is commonly used in the Python programming language.

This guide will follow the same convention to avoid confusion.

!!#:insertTable(ref="numbers/gen-numbers-bases",sortby="#column1");

!!#://----------------------------------------------------------
!!#:subsection(title="Converting between bases",section="conversion");
!!#:preformatted=0; newlinebreak=0;
To convert between bases, multiply each digit by the base you are converting
from and repeat the multiplication by the place (the count of the column from
the right side counting from zero) of the digit. Sum the products together.
For the rightmost column, no multiplication is performed. Skip zero digits to
save time.

Repeated multiplication of X by a count of Y is also known as the power of X
to Y. Shown here as X ^ Y where ^ is the power operator, not XOR.

To convert binary (base 2) to decimal:

!!#:preformatted=1; newlinebreak=1;
     1001101b
     -------
     6543210   count from right side
     |||||||
     ||||||1     --+
     |||||2        |
     ||||2*2       |
     |||2*2*2      +-- multiply by and sum each product
     ||2*2*2*2     |
     |2*2*2*2*2    |
     2*2*2*2*2*2 --+

     In this example:
            1 * 2*2*2*2*2*2  (7th column count 6)    2^6 == 64
          + 0 * 2*2*2*2*2    (6th column count 5)    2^5 == 32
          + 0 * 2*2*2*2      (5th column count 4)    2^4 == 16
          + 1 * 2*2*2        (4th column count 3)    2^3 == 8
          + 1 * 2*2          (3rd column count 2)    2^2 == 4
          + 0 * 2            (2nd column count 1)    2^1 == 2
          + 1                (1st column count 0)    2^0 == 1
       ------------------
            64
          +  0
          +  0
          +  8
          +  4
          +  0
          +  1
        -----------------
            77
!!#:preformatted=0; newlinebreak=0;

To convert hexadecimal (base 16) to decimal:

!!#:preformatted=1; newlinebreak=1;
     0x1E4
     -----
       210   count from right side
       |||
       ||1    --+
       |16      +-- multiply by and sum each product
       16*16  --+

     0xE = 14 dec

     In this example:
           0x1 * 16*16        (3rd column count 2)   16^2 = 256
         + 0xE * 16           (2nd column count 1)   16^1 = 16
         + 0x4                (1st column count 0)   16^0 = 1
       ------------------
           256
         + 224                (0xE*16 == 14*16)
         +   4
       ------------------
           484
!!#:preformatted=0; newlinebreak=0;

The same rules apply going to and from binary, decimal, octal, and
hexadecimal.

!!#://----------------------------------------------------------
!!#:subsection(title="Addition/subtraction",section="addition");
!!#:preformatted=0; newlinebreak=0;
Just as with decimal, addition works the same in any other numeric base. Add
each digit. If the sum requires more than one digit (is equal or larger to the
numeric base), carry into the next digit. The rules are the same regardless
of numeric base.

Add each digit going through each column right to left. Write the first digit
of the sum below the line. If the sum needs more than one digit, carry that
second digit into the next column as part of the addition.

!!#:preformatted=1; newlinebreak=1;
No carry, none of the columns add up to a sum needing two digits:
   1     3    11    33   382105
  +1    +4   +13   +55  +617594
  --    --   ---    --  -------
   2     7    24    88   999699

If a sum within a column needs two digits, the second digit is carried (added)
to the next column:

 (1)   (1)   (1)   (1)
   9     8    23    44
  +1    +9   + 8   +57
  --    --   ---   ---
  10    17    31   101

              ^    ^
              |    |
            3+8=11 |
                   |
                 4+7=11
               (1)+4+5=10

Decimal:
         4       4      13
       + 5     + 9    + 79
       ---     ---    ----
         9      13      92

                            (1)
Binary:              (1)     (1)
         0b     1b    101b   10110b
       + 1b   + 1b  + 110b  + 1101b
       ---    ---     ---   ------
         1b    10b   1011b  100011b

                               ^^
                               ||
                             1+1=10 in binary
                             Check: 10110b = 22 decimal
                                     1101b = 13 decimal
                                   100011b = 35 decimal

                           (1)
                            (1)
Octal:       (1)  (1)  (1)   (1)
         02   04   07  013  0644
        +03  +05  +07 +036 +0777
         --   --   --  --- -----
         05  011  016  051 01643

              ^    ^    ^
              |    |    |
        4+5=9, 9 dec = 011 octal
        7+7=14, 14 dec = 016 octal
        013+036=051 oct is 11+30=41 dec
        0644+0777=01643 oct is 420+511=931 dec

                        (1)
Hexadecimal:      (1)    (1)
      0x4   0x6   0xA   0x34
     +0x4  +0x6  +0x8  +0xFD
     ----  ----  ----  -----
      0x8   0xC  0x12  0x137

      0x6+0x6=0xC hex is 6+6+12 dec. 0xC = 12.
      0xA+0x8=0x12 hex is 10+8=18 dec. 0xA = 10 dec, 0x12 = 18 dec.
      0x34+0xFD=0x137 hex is 52+253=305 dec.
!!#:preformatted=0; newlinebreak=0;

Subtraction works the same way as it does in decimal. Work right to left on
each column, subtract digits and carry. It will work in any numeric base
including binary.

It is uncommon to write negative hexadecimal, octal, and binary numbers.
Negative numbers are often handled by computers by using one of the bits to
say whether the number is positive or negative. This is often called the sign
bit. The bit chosen is usually the highest numbered bit in the data type used
by the program. 0 is almost always considered positive, but some negative
number encodings allow a negative zero. Non-decimal numeric bases in computer
programs often represent the actual bits stored in memory including the sign
bit, which is then interpreted as part of the number.

!!#://----------------------------------------------------------
!!#:subsection(title="Multiplication",section="multiplication");
!!#:preformatted=0; newlinebreak=0;
Multiplication works the same as it does with decimal. Arrange the numbers to
multiply as you would on paper, in columns. For each digit in the first,
multiply it by all digits of the second. Sum each product together.

Multiplication of X and Y as a function means to start from zero, and add X, Y
times.

When decimal numbers are involved, the digits are multiplied ignoring the
decimal point and then the product is given a new decimal point that is
placed at the sum of the two original decimal point positions.

Though computer software uses the asterisk (*) to represent multiplication,
traditional arithmetic uses a diagonal cross or X.

Traditionally multiplication on paper was taught using the memorization of a
12x12 "times table".

!!#:preformatted=1; newlinebreak=1;
Decimal:

      3      9     13              123
    X 4   X 12   X 25            X 842
    ---   ----   ----            -----
     12     18     15 ( 3 x  5)      6  (  3 x   2)
          + 9   +  50 (10 x  5)     40  ( 20 x   2)
          ----  +  60 ( 3 x 20)    200  (100 x   2)
           108  + 200 (10 x 20)    120  (  3 x  40)
                -----              800  ( 20 x  40)
                  325             4000  (100 x  40)
                                  2400  (  3 x 800)
                                 16000  ( 20 x 800)
                               + 80000  (100 x 800)
                               -------
                                103566

Binary:

      10b (2)
    X 11b (3)
    -----
       0b   ( 0b x  1b)
      10b   (10b x  1b)
      00b   ( 0b x 10b)
   + 100b   (10b x 10b)
   ------
     110b (6)


Hexadecimal:

      0xE (14)       0x123 (1*256 + 2*16 + 3 = 291)
    X 0x4  (4)     X 0xABC (10*256 + 11*16 + 12 = 2560 + 176 + 12 = 2748)
    -----            -----
     0x38 (56)        0x24 (0x003 x 0x00C) (3 * 12 = 36)
                     0x180 (0x020 x 0x00C) (32 * 12 = 384)
                     0xC00 (0x100 x 0x00C) (256 * 12 = 3072)
                     0x210 (0x003 x 0x0B0) (3 * 176 = 528)
                    0x1600 (0x020 x 0x0B0) (32 * 176 = 5632)
                    0xB000 (0x100 x 0x0B0) (256 * 176 = 45056)
                     0x1E0 (0x003 x 0xA00) (3 * 160 = 480)
                    0x1400 (0x020 x 0xA00) (32 * 160 = 5120)
                    0xA000 (0x100 x 0xA00) (256 * 160 = 40960)
                    ------
                   0x18B94 (36+384+3072+528+5632+45056+480+5120+40960 = 101268)
!!#:preformatted=0; newlinebreak=0;
!!#:insertTable(ref="numbers/gen-numbers-times-tables",layout="2d-grid",columns="Y",rows="X",cellcontent2d="column:Result (Hexadecimal)",title="Times tables (Hexadecimal)");
!!#:insertTable(ref="numbers/gen-numbers-times-tables",layout="2d-grid",columns="Y",rows="X",cellcontent2d="column:Result (Decimal)",title="Times tables (Decimal)");
!!#:insertTable(ref="numbers/gen-numbers-times-tables",layout="2d-grid",columns="Y",rows="X",cellcontent2d="column:Result (Octal)",title="Times tables (Octal)");
!!#:insertTable(ref="numbers/gen-numbers-times-tables",layout="2d-grid",columns="Y",rows="X",cellcontent2d="column:Result (Binary)",title="Times tables (Binary)");

