{
	"id": "sound-blaster-dsp-commands",
	"schema": {
		"version": 1
	},
	"source": {
		"id": "dosbox-x",
		"type": "website"
	},
	"notes": [
		"Time constant: A side effect of 256 - 1000000/freq is that it is impossible to precisely represent standard frequencies like 11025Hz this way.\nThe lowest sample rate possible this way is 3906Hz (256 - 1000000/3096 = 0x00), the highest is 1MHz (256 - 1000000/1000000 = 256 - 1 = 0xFF) although for obvious reasons the DSP caps the sample rate at what it can support.\nOn real Creative hardware the maximum rate is about 45454Hz for 'high speed' playback (DSP 2.0 or higher) and 22727Hz for normal non-highspeed playback (original Sound Blaster and Sound Blaster Pro when non-highspeed playback is involved). The ADPCM playback modes have an even lower sample rate cap (13KHz-16KHz) due to limitations in DSP processing power. DOSLIB testing with real hardware shows that ADPCM commands can be driven faster than the limit at the cost that alising artifacts occur because the DSP cannot keep up. Sound Blaster clones may impose additional limits on supported upper and lower sample rates, or they can fail to impose limits and support supersonic sample rates given ideal bus and memory conditions even if not an intended mode of operation. Sound Blaster 16 allows the time constant to specify up to 45454Hz whether or not 'high-speed DMA' commands are involved, contrary to earlier Sound Blaster hardware. Due to a bug in the Sound Blaster 16 DSP, this command is the only way to get 3906Hz playback as the SB16 set sample rate command limit playback to just above 4000Hz. Sound Blaster 16 will, and most clones may, convert the time code to a sample rate and then round the sample rate to some nearest multiple supported by the card, while original Sound Blaster and Pro hardware will produce exactly the expected rate. Older Sound Blaster 16 DSPs have a bug in the DSP that for nonstandard rates can cause unexpected erroneously low sample rates."
	],
	"csv interpret newline": true,
	"table in csv": true
}
